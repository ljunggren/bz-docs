"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2594],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var r=a.createContext({}),d=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(r.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,r=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(n),g=i,h=p["".concat(r,".").concat(g)]||p[g]||u[g]||o;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=g;var s={};for(var r in t)hasOwnProperty.call(t,r)&&(s[r]=t[r]);s.originalType=e,s[p]="string"==typeof e?e:i,l[1]=s;for(var d=2;d<o;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},555:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294);const i=e=>{let{embedId:t}=e;return a.createElement("div",{className:"video-responsive"},a.createElement("iframe",{width:"853",height:"480",src:`https://www.youtube.com/embed/${t}`,frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0,title:"Embedded youtube"}))}},30:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var a=n(7462),i=(n(7294),n(3905));n(555);const o={id:"api-json",title:"Example with JSON server"},l=void 0,s={unversionedId:"api-testing/api-json",id:"api-testing/api-json",title:"Example with JSON server",description:"Dependencies",source:"@site/docs/api-testing/api-json.mdx",sourceDirName:"api-testing",slug:"/api-testing/api-json",permalink:"/docs/api-testing/api-json",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-testing/api-json.mdx",tags:[],version:"current",frontMatter:{id:"api-json",title:"Example with JSON server"},sidebar:"docs",previous:{title:"Overview",permalink:"/docs/api-testing/api-overview"},next:{title:"Temporary database",permalink:"/docs/api-testing/temporary-database"}},r={},d=[{value:"Dependencies",id:"dependencies",level:2},{value:"Installing JSON server",id:"installing-json-server",level:2},{value:"Getting started in Boozang",id:"getting-started-in-boozang",level:2},{value:"Signing up",id:"signing-up",level:3},{value:"Creating your first project",id:"creating-your-first-project",level:3},{value:"Installing the extension",id:"installing-the-extension",level:3},{value:"Launching the tool",id:"launching-the-tool",level:3},{value:"Switching to test authoring view",id:"switching-to-test-authoring-view",level:3},{value:"Module and test creation",id:"module-and-test-creation",level:3},{value:"Getting started with API tests",id:"getting-started-with-api-tests",level:2},{value:"Defining data: Employee",id:"defining-data-employee",level:2},{value:"First API call: Create employee",id:"first-api-call-create-employee",level:3},{value:"First API validation: Create employee",id:"first-api-validation-create-employee",level:3},{value:"Saving the id",id:"saving-the-id",level:3},{value:"Second API call: Retrieve employee",id:"second-api-call-retrieve-employee",level:3},{value:"Second API call: Validating employee information",id:"second-api-call-validating-employee-information",level:2},{value:"Conclusion",id:"conclusion",level:2}],c={toc:d};function p(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"dependencies"},"Dependencies"),(0,i.kt)("p",null,"In this exercise, we use the NPM package JSON-server to emulate a REST API locally. We then use Boozang to create a data-driven API test consisting of create-operations and edit-operations, along with validations."),(0,i.kt)("p",null,"I based this post on the blog post from Sebastien Eschweiler: ",(0,i.kt)("a",{parentName:"p",href:"https://medium.com/codingthesmartway-com-blog/create-a-rest-api-with-json-server-36da8680136d"},"https://medium.com/codingthesmartway-com-blog/create-a-rest-api-with-json-server-36da8680136d"),"."),(0,i.kt)("p",null,"It\u2019s a great starting point as it gives a more in-depth look at JSON-server and Postman."),(0,i.kt)("h2",{id:"installing-json-server"},"Installing JSON server"),(0,i.kt)("p",null,"JSON server is a handy tool to emulate an API. Start by installing the npm package globally on your computer."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npm install -g json-server\n")),(0,i.kt)("p",null,"Next, create a db.json with the following content."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{ \n "employees": [\n  { \n   "id","1",\n   "first_name": "Mats",\n   "last_name": "Ljunggren",\n   "email": "aa@bb.com"\n  }\n ]\n}\n')),(0,i.kt)("p",null,"Start the server locally. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ json-server --watch db.json\n")),(0,i.kt)("p",null,"You can now easily verify that the API is running by accessing the URL in your browser: http://localhost:3000"),(0,i.kt)("h2",{id:"getting-started-in-boozang"},"Getting started in Boozang"),(0,i.kt)("p",null,"You can skip this section if you have already created an account and are familiar with Boozang."),(0,i.kt)("h3",{id:"signing-up"},"Signing up"),(0,i.kt)("p",null,"To get started, sign-up for a free account at: boozang.com."),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"Homepage",src:n(5957).Z,title:"Homepage",width:"982",height:"613"})),(0,i.kt)("p",null,"You will receive a confirmation email, and you are ready to get started."),(0,i.kt)("p",null,"We recently opened up the free tier of Boozang to unlimited API testing."),(0,i.kt)("h3",{id:"creating-your-first-project"},"Creating your first project"),(0,i.kt)("p",null,"Go ahead and create your first project by clicking the \u201cNew project\u201d button. Let\u2019s name the project: \u201cAPI lab\u201d and click \u201cSubmit.\u201d You can ignore the other options for now."),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"Project page",src:n(1764).Z,title:"Project page",width:"1024",height:"716"})),(0,i.kt)("p",null,"As you can see, the project will show in the project list."),(0,i.kt)("h3",{id:"installing-the-extension"},"Installing the extension"),(0,i.kt)("p",null,"To launch the Boozang tool, you\u2019ll need a supported browser. Supported browsers are Google Chrome, Microsoft Edge, or Chromium. Go ahead and install the Boozang extension using the browser of your choice."),(0,i.kt)("p",null,"The extension can be found here."),(0,i.kt)("h3",{id:"launching-the-tool"},"Launching the tool"),(0,i.kt)("p",null,"Launch the tool by clicking launch next to the project name \u201cAPI lab\u201d in the management UI. The Boozang tool (or the IDE) will be launched in a new browser window. This window is running locally in your web browser and can be treated similarly to a desktop application."),(0,i.kt)("p",null,"Start by entering the URL to your local JSON-server when you get prompted for Environment config. You can always revisit this configuration in the Settings -> Environment using the sidebar navigation."),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"Enviroments",src:n(3207).Z,title:"Enviroments",width:"756",height:"611"})),(0,i.kt)("p",null,"BTW: If you get prompted to \u201cEnable AI authorization,\u201d go ahead and skip this step."),(0,i.kt)("h3",{id:"switching-to-test-authoring-view"},"Switching to test authoring view"),(0,i.kt)("p",null,"Make sure to navigate to the top icon using the sidebar navigation. You are now at the test authoring view, where you can create modules and tests. In Boozang, a module-based tool, all tests need to be inside modules."),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"Test authoring",src:n(8041).Z,title:"Test authoring",width:"781",height:"629"})),(0,i.kt)("p",null,"Even though all the work we will do from now on will be in this authoring view, try playing around using the sidebar to discover what can be done using the tool."),(0,i.kt)("h3",{id:"module-and-test-creation"},"Module and test creation"),(0,i.kt)("p",null,"Boozang is comprised of modules and tests. Start by creating a module from the authoring view by clicking \u201cNew module.\u201d Enter the module name \u201cJSON server\u201d."),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"Test creation",src:n(1221).Z,title:"Test creation",width:"768",height:"619"})),(0,i.kt)("p",null,"To create a test, make sure you click into the module \u201cJSON server\u201d and select the API tests from the module tabs. Click \u201cNew API test\u201d."),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"API tests",src:n(8562).Z,title:"API tests",width:"899",height:"678"})),(0,i.kt)("p",null,"You can now select the JSON server you installed as your API host. GO ahead and click \u201cSubmit,\u201d and you will see an empty API test created."),(0,i.kt)("p",null,"As soon as you create a new API test, you can access the API action details."),(0,i.kt)("h2",{id:"getting-started-with-api-tests"},"Getting started with API tests"),(0,i.kt)("p",null,"The steps we have taken previously were for setup only. We can now make all the rest of the API requests inside the same API test."),(0,i.kt)("h2",{id:"defining-data-employee"},"Defining data: Employee"),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"Defining data",src:n(3578).Z,title:"Defining data",width:"899",height:"678"})),(0,i.kt)("p",null,"Start by defining the data we will use. Let\u2019s start by going to the Data tab, adding object data on the $test level, and entering the following information."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n"firstname":"Mats",\n"lastname":"Ljunggren",\n"email":"mats.ljunggren@boozang.com"\n}\n')),(0,i.kt)("p",null,"See below screenshot"),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"Defining data",src:n(7815).Z,title:"Defining data",width:"899",height:"567"})),(0,i.kt)("h3",{id:"first-api-call-create-employee"},"First API call: Create employee"),(0,i.kt)("p",null,"Now it\u2019s time to do the initial API call \u2013 to create the employee data via the employee. This is done using the HTTP method POST. "),(0,i.kt)("p",null,"Make sure you use the dynamic data in the body of the request according to the picture below."),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"Defining data",src:n(3572).Z,title:"Defining data",width:"899",height:"678"})),(0,i.kt)("p",null,"Do you get a green checkmark? Try it using the play button within the \u201cTry\u201d tab."),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"Green",src:n(1912).Z,title:"Green",width:"899",height:"630"})),(0,i.kt)("p",null,"Great, let\u2019s move on. "),(0,i.kt)("h3",{id:"first-api-validation-create-employee"},"First API validation: Create employee"),(0,i.kt)("p",null,"The green checkmark on the \u201cTry\u201d tab is great, but what does it tell us? It only tells us that the request went out successfully. You can also see a green checkmark on the \u201cScript\u201d tab. Let\u2019s look a little closer at this."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"(()=>{\n  if($result.status>=400){\n    return false;\n  }\n\n  return true;\n})()\n")),(0,i.kt)("p",null,"Here, a return value of false means the API call failed, and a return value of true means success. By default, we are only looking for HTTP status codes < 400. Let\u2019s tune this a little bit to make validation a little stricter."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'(()=>{\n  console.log("BZ-LOG: ### Result: " + $result.responseJSON.id)\n  if ($result.status >201) {\n    return false;\n  } \n   \n  console.log("BZ-LOG: ### Result: " + $result.responseJSON.id)\n  $test.response_id=$result.responseJSON.id;\n  return !isNaN($result.responseJSON.id);\n})();\n')),(0,i.kt)("p",null,"That\u2019s better.   "),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"Defining data",src:n(4285).Z,title:"Defining data",width:"899",height:"678"})),(0,i.kt)("h3",{id:"saving-the-id"},"Saving the id"),(0,i.kt)("p",null,"It\u2019s often necessary to save some data from a previous API call to be used in a subsequent one. This example is not an exception. Here we would like to save the id. We can do that in a very straightforward manner in Boozang."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$test.response_id=$result.responseJSON.id;\n")),(0,i.kt)("h3",{id:"second-api-call-retrieve-employee"},"Second API call: Retrieve employee"),(0,i.kt)("p",null,"We want to make sure the data has been saved in the API server correctly. We will use the GET function for this."),(0,i.kt)("p",null,"Now we could choose to add one more API action to the test. Instead, we will add an additional API call to the API test using the plus button (+) next to the API call drop-down to keep it simple."),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"Defining data",src:n(7709).Z,title:"Defining data",width:"896",height:"678"})),(0,i.kt)("p",null,"We get a new blank test to work with."),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"Defining data",src:n(2287).Z,title:"Defining data",width:"899",height:"678"})),(0,i.kt)("p",null,"Make sure to fill out the host field and end-point"),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"Defining data",src:n(2280).Z,title:"Defining data",width:"899",height:"678"})),(0,i.kt)("p",null,"Here, we will insert the id as a query to make sure we fetch the right employee."),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"Defining data",src:n(1587).Z,title:"Defining data",width:"899",height:"678"})),(0,i.kt)("p",null,"Go to the Try tab and make sure the information is correct."),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"Defining data",src:n(910).Z,title:"Defining data",width:"899",height:"678"})),(0,i.kt)("h2",{id:"second-api-call-validating-employee-information"},"Second API call: Validating employee information"),(0,i.kt)("p",null,"In this step, we want to validate that the API stored the employee information correctly. We do this by modifying the script in the following way."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'(()=>{\n  console.log("BZ-LOG: ### Result: " + $result.responseJSON.id)\n  if ($result.status >201) {\n    return false;\n  } \n  \n  let status = $result.responseJSON[0].first_name === $test.person.firstName &&\n  $result.responseJSON[0].last_name === $test.person.lastName &&\n  $result.responseJSON[0].email === $test.person.email;\n   \n  return status;\n})();\n')),(0,i.kt)("p",null,"In the tool, it should look like this"),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"Defining data",src:n(562).Z,title:"Defining data",width:"899",height:"678"})),(0,i.kt)("p",null,"You can now play the test"),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"Defining data",src:n(1608).Z,title:"Defining data",width:"1024",height:"625"})),(0,i.kt)("p",null,"As you can see, there is limited information here. It only shows the green checkmark that the test executed successfully."),(0,i.kt)("p",null,"To get more information, switch to the report view"),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"Defining data",src:n(5955).Z,title:"Defining data",width:"1024",height:"624"})),(0,i.kt)("p",null,"This was an example of how you can create a data-driven test in Boozang that carries over data for validation to a subsequent API call."),(0,i.kt)("h2",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"As you can see, Boozang requires some work to get started. Once you have your initial module, it\u2019s fairly straightforward to keep adding API requests and tie them together using data."),(0,i.kt)("p",null,"As Boozang was designed for end-to-end UI tests, API tests, and a mix of the two, there is some added complexity to work through. The advantage is that having access to the application interface via the browser provides several benefits to the user. Read more about these benefits here: ",(0,i.kt)("a",{parentName:"p",href:"https://boozang.com/blog/advanced-api-testing"},"https://boozang.com/blog/advanced-api-testing"),"."))}p.isMDXComponent=!0},5957:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/api1-32260214069cd4c9733654cc328cd880.png"},1912:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/api10-dc794e68f04a49ba9b130567aef2aa98.png"},4285:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/api11-ac1427b325aeff2abd69eb343df82395.png"},7709:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/api12-1165ce1fe80f9a19cc8788ec65d8d714.png"},2287:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/api13-7e6ec39276c38898f294430eca95cad7.png"},2280:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/api14-7936456eb6ddace0cd861750746de94c.png"},1587:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/api15-902c16e1bd08226142ad4481d57f7eae.png"},910:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/api16-6d9c0630f6c3f010f335ec674ae760ca.png"},562:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/api17-88202c9342caea410d13722f368e52a6.png"},1608:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/api18-ba225356d0556af8bd3ac81ac7bd3339.png"},5955:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/api19-5bdaa29b4bdded980d32c17d746ff34e.png"},1764:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/api2-3945d08ee94cfd2a350274ae108b418c.png"},3207:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/api3-b344cf988703d5aef852c641006b6486.png"},8041:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/api4-55940b5a8c3d1f66f6d776351ecf8959.png"},1221:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/api5-41f260c74aca6949cb4f02c88f837032.png"},8562:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/api6-30f7bdfc31bffc9b7005ea4b3672bf32.png"},3578:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/api7-83ee15dcb89411e3f984ed9649735287.png"},7815:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/api8-1df246cc8203afc8466353f2f86afe9f.png"},3572:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/api9-a330f9ca3f3340039652bbfa9d8a17f7.png"}}]);