"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6213],{3905:(e,n,a)=>{a.d(n,{Zo:()=>p,kt:()=>v});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function m(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=t.createContext({}),c=function(e){var n=t.useContext(o),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},p=function(e){var n=c(e.components);return t.createElement(o.Provider,{value:n},e.children)},d="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=m(e,["components","mdxType","originalType","parentName"]),d=c(a),u=r,v=d["".concat(o,".").concat(u)]||d[u]||s[u]||l;return a?t.createElement(v,i(i({ref:n},p),{},{components:a})):t.createElement(v,i({ref:n},p))}));function v(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var m={};for(var o in n)hasOwnProperty.call(n,o)&&(m[o]=n[o]);m.originalType=e,m[d]="string"==typeof e?e:r,i[1]=m;for(var c=2;c<l;c++)i[c]=a[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},555:(e,n,a)=>{a.d(n,{Z:()=>r});var t=a(7294);const r=e=>{let{embedId:n}=e;return t.createElement("div",{className:"video-responsive"},t.createElement("iframe",{width:"853",height:"480",src:`https://www.youtube.com/embed/${n}`,frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0,title:"Embedded youtube"}))}},7202:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>m,toc:()=>c});var t=a(7462),r=(a(7294),a(3905));a(555);const l={id:"json-path",title:"JSON path"},i=void 0,m={unversionedId:"api-testing/json-path",id:"api-testing/json-path",title:"JSON path",description:"Utility functions",source:"@site/docs/api-testing/json-path.mdx",sourceDirName:"api-testing",slug:"/api-testing/json-path",permalink:"/docs/api-testing/json-path",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-testing/json-path.mdx",tags:[],version:"current",frontMatter:{id:"json-path",title:"JSON path"},sidebar:"docs",previous:{title:"Tree view",permalink:"/docs/api-testing/tree-view"},next:{title:"JSON compare",permalink:"/docs/api-testing/json-compare"}},o={},c=[{value:"Utility functions",id:"utility-functions",level:2},{value:"Usage examples",id:"usage-examples",level:2},{value:"Sample data for examples",id:"sample-data-for-examples",level:3},{value:"Extract specific node",id:"extract-specific-node",level:3},{value:"Extract specific node and rename it",id:"extract-specific-node-and-rename-it",level:3},{value:"Extract specific node (array example)",id:"extract-specific-node-array-example",level:3},{value:"Extract specific node (array example), remove key",id:"extract-specific-node-array-example-remove-key",level:3},{value:"Extracting a node",id:"extracting-a-node",level:3},{value:"Extract a node and rename it",id:"extract-a-node-and-rename-it",level:3},{value:"Extract a node and remove key",id:"extract-a-node-and-remove-key",level:3},{value:"Extract multiple nodes",id:"extract-multiple-nodes",level:3},{value:"Extract matching nodes anywhere in the tree",id:"extract-matching-nodes-anywhere-in-the-tree",level:3},{value:"Extract several matching nodes anywhere in the tree",id:"extract-several-matching-nodes-anywhere-in-the-tree",level:3},{value:"Extract multiple matching nodes anywhere in the tree",id:"extract-multiple-matching-nodes-anywhere-in-the-tree",level:3},{value:"Extract matching nodes and remove path",id:"extract-matching-nodes-and-remove-path",level:3},{value:"Extract matching nodes and remove path, renaming the key",id:"extract-matching-nodes-and-remove-path-renaming-the-key",level:3}],p={toc:c};function d(e){let{components:n,...a}=e;return(0,r.kt)("wrapper",(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"utility-functions"},"Utility functions"),(0,r.kt)("p",null,"In doing API testing, we sometimes needs to do validations of large payloads. To support a flexible wayof doing these\nvalidation we have developed a new JSON-based expression language, similar to XPath. We call this JSON-path."),(0,r.kt)("p",null,"We introduce the following new ",(0,r.kt)("em",{parentName:"p"},"utility-functions"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"- $util.extractData(data, JSONPathExpression)\n")),(0,r.kt)("h2",{id:"usage-examples"},"Usage examples"),(0,r.kt)("p",null,"This functionality is best descibed with an example"),(0,r.kt)("h3",{id:"sample-data-for-examples"},"Sample data for examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n  name:"name-1",\n  value:"value-1",\n  data:{\n    name:"name-2",\n    value:"value-2"\n  },\n  list:[\n    {\n      name:"name-3",\n      value:"value-3"\n    },\n    {\n      name:"name-4",\n      value:"value-4",\n      age:33\n    },\n    {\n      obj:{\n        name:"name-5",\n        value:"value-5",\n        age:33\n      }\n    }\n  ]\n}\n')),(0,r.kt)("h3",{id:"extract-specific-node"},"Extract specific node"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"data.name" ==>\n{\n  data:{\n    name:"name-2"\n  }\n}\n')),(0,r.kt)("h3",{id:"extract-specific-node-and-rename-it"},"Extract specific node and rename it"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"data(abc).name" ==>\n{\n  abc:{\n    name:"name-2"\n  }\n}\n')),(0,r.kt)("h3",{id:"extract-specific-node-array-example"},"Extract specific node (array example)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"list.name" ==>\n{\n  list:[\n    {\n      name:"name-3"\n    },\n    {\n      name:"name-4"\n    }\n  ]\n}  \n')),(0,r.kt)("h3",{id:"extract-specific-node-array-example-remove-key"},"Extract specific node (array example), remove key"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"list().name" ==>\n[\n  {\n    name:"name-3"\n  },\n  {\n    name:"name-4"\n  }\n] \n')),(0,r.kt)("h3",{id:"extracting-a-node"},"Extracting a node"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"name" ==>\n{\n  name:"name-1"\n}\n')),(0,r.kt)("h3",{id:"extract-a-node-and-rename-it"},"Extract a node and rename it"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"name(Name)" ==>\n{\n  Name:"name-1"\n}\n')),(0,r.kt)("h3",{id:"extract-a-node-and-remove-key"},"Extract a node and remove key"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"name()" ==>\n"name-1"\n')),(0,r.kt)("h3",{id:"extract-multiple-nodes"},"Extract multiple nodes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'["name","value"] ==>\n{\n  name:"name-1",\n  value:"value-1"\n}\n')),(0,r.kt)("h3",{id:"extract-matching-nodes-anywhere-in-the-tree"},"Extract matching nodes anywhere in the tree"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"*.name" ==>\n{\n  name:"name-1",\n  data:{\n    name:"name-2"\n  },\n  list:[\n    {\n      name:"name-3"\n    },\n    {\n      name:"name-4"\n    },\n    {\n      obj:{\n        name:"name-5"\n      }\n    }\n  ]\n}\n')),(0,r.kt)("h3",{id:"extract-several-matching-nodes-anywhere-in-the-tree"},"Extract several matching nodes anywhere in the tree"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'["*.name","*.value"] ==>\n{\n  "name": "name-1",\n  "data": {\n    "name": "name-2",\n    "value": "value-2"\n  },\n  "list": [\n    {\n      "name": "name-3",\n      "value": "value-3"\n    },\n    {\n      "name": "name-4",\n      "value": "value-4"\n    },\n    {\n      "obj": {\n        "name": "name-5",\n        "value": "value-5"\n      }\n    }\n  ],\n  "value": "value-1"\n}\n')),(0,r.kt)("h3",{id:"extract-multiple-matching-nodes-anywhere-in-the-tree"},"Extract multiple matching nodes anywhere in the tree"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{"*":["name","value"]} ==>\n{\n  name:"name-1",\n  value:"value-1",\n  data:{\n    name:"name-2",\n    value:"value-2"\n  },\n  list:[\n    {\n      name:"name-3",\n      value:"value-3"\n    },\n    {\n      name:"name-4",\n      value:"value-4",\n      age:33\n    },\n    {\n      obj:{\n        name:"name-5",\n        value:"value-5",\n      }\n    }\n  ]\n}\n')),(0,r.kt)("h3",{id:"extract-matching-nodes-and-remove-path"},"Extract matching nodes and remove path"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"*().name" ==>\n{\n  name:[\n    "name-1",\n    "name-2",\n    "name-3",\n    "name-4",\n    "name-5"\n  ]\n}\n')),(0,r.kt)("h3",{id:"extract-matching-nodes-and-remove-path-renaming-the-key"},"Extract matching nodes and remove path, renaming the key"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"*(abc).name" ==>\n{\n  "abc": {\n    "name": "name-1",\n    "data": {\n      "name": "name-2"\n    },\n    "list": [\n      {\n        "name": "name-3"\n      },\n      {\n        "name": "name-4"\n      },\n      {\n        "obj": {\n          "name": "name-5"\n        }\n      }\n    ]\n  }\n}\n### Extract matching nodes, skip root level\n')),(0,r.kt)("p",null,'"+.name" ==>\n{\ndata:{\nname:"name-2"\n},\nlist:','[\n{\nname:"name-3"\n},\n{\nname:"name-4"\n}\n]',"\n}"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"### Extract matching nodes, skip root level and set new root key\n")),(0,r.kt)("p",null,'"+(abc).*.name" ==>\n{\nabc:{\ndata:{\nname:"name-2"\n},\nlist:','[\n{\nname:"name-3"\n},\n{\nname:"name-4"\n},\n{\nobj:{\nname:"name-5"\n}\n}\n]',"\n}",(0,r.kt)("br",{parentName:"p"}),"\n","}"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"### Extract all matching nodes, remove keys\n")),(0,r.kt)("p",null,'"list().*.name" ==>\n','[\n{\nname:"name-3"\n},\n{\nname:"name-4"\n},\n{\nobj:{\nname:"name-5"\n}\n}\n]'," "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"### Extract matching nodes, flatten tree\n")),(0,r.kt)("p",null,'"list().*().name" ==>\n','[\n{\nname:"name-3"\n},\n{\nname:"name-4"\n},\n{\nname:"name-5"\n}\n]'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"### Extract mathcing nodes, return in array\n")),(0,r.kt)("p",null,'"list().*().name()" ==>\n','["name-3", "name-4", "name-5"]'))}d.isMDXComponent=!0}}]);