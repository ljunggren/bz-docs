"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3305],{31:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>f,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var n=a(4848),o=a(8453);const i={id:"databind",title:"Data binding"},s=void 0,d={id:"core-concepts/using-data/databind",title:"Data binding",description:"A note on form fills and data",source:"@site/docs/core-concepts/using-data/databind.mdx",sourceDirName:"core-concepts/using-data",slug:"/core-concepts/using-data/databind",permalink:"/docs/core-concepts/using-data/databind",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/core-concepts/using-data/databind.mdx",tags:[],version:"current",frontMatter:{id:"databind",title:"Data binding"},sidebar:"docs",previous:{title:"Data types",permalink:"/docs/core-concepts/using-data/datatypes"},next:{title:"Regular Expressions",permalink:"/docs/core-concepts/using-data/regexp"}},r={},l=[{value:"A note on form fills and data",id:"a-note-on-form-fills-and-data",level:3},{value:"Binding from forms to data",id:"binding-from-forms-to-data",level:3},{value:"Binding from data to forms",id:"binding-from-data-to-forms",level:3},{value:"Auto-filling forms from data",id:"auto-filling-forms-from-data",level:3}];function c(e){const t={em:"em",h3:"h3",p:"p",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h3,{id:"a-note-on-form-fills-and-data",children:"A note on form fills and data"}),"\n",(0,n.jsx)(t.p,{children:"When recording a test, any data entered into a form will be recorded as well. Usually, this will happen when pressing Enter key, tab key or when using the mouse to click the next field or submitting the form. Sometimes it's sufficient to record a test with a certain hard-coded set of data. More often, it\xb4s desirable to capture data into variables so that the test can be re-used for several different sets of data. Boozang makes this very easy to do."}),"\n",(0,n.jsx)(t.h3,{id:"binding-from-forms-to-data",children:"Binding from forms to data"}),"\n",(0,n.jsx)(t.p,{children:'One way of capturing data into variables is to start on the application side. When entering data into the form, click the "Bind data" checkbox in the toolbar and select the data scope you would like to capture the data. While typing, you can see that you are prompted to save the data in a variable. When you fully typed out the field, click the desired field name and the data will be saved at the appropriate data scope that you selected.'}),"\n",(0,n.jsx)(t.h3,{id:"binding-from-data-to-forms",children:"Binding from data to forms"}),"\n",(0,n.jsx)(t.p,{children:'There is also a different way to fill data. Start by entering the data (normally as a JSON object), and after this, click the "Bind data" checkbox and select the data scope where you entered the data. When starting typing, you can see that the data in the data scope is suggested to you. Click on the suggested data, and it will be automatically typed into the form and bound into the event action.'}),"\n",(0,n.jsx)(t.h3,{id:"auto-filling-forms-from-data",children:"Auto-filling forms from data"}),"\n",(0,n.jsx)(t.p,{children:"As you can see, any data key names that correspond (matches case-insensitive / white-space insensitive) to the form labels will be suggested when binding data to forms. If you have organized your data well and made sure all data keys match the form labels, you can click the Auto-fill link and all the form events will be generated automatically."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.em,{children:"Tip: This can greatly speed up test creation of form fill tests, so try and learn this naming convention."})})]})}function f(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>s,x:()=>d});var n=a(6540);const o={},i=n.createContext(o);function s(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);