"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8749],{6522:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var s=n(4848),i=n(8453);const a={id:"api-overview",title:"Overview"},o=void 0,r={id:"api-testing/api-overview",title:"Overview",description:"Note on pricing",source:"@site/docs/api-testing/api-overview.mdx",sourceDirName:"api-testing",slug:"/api-testing/api-overview",permalink:"/docs/api-testing/api-overview",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-testing/api-overview.mdx",tags:[],version:"current",frontMatter:{id:"api-overview",title:"Overview"},sidebar:"docs",previous:{title:"Taking it further",permalink:"/docs/integrations/further"},next:{title:"Example with JSON server",permalink:"/docs/api-testing/api-json"}},l={},d=[{value:"Note on pricing",id:"note-on-pricing",level:2},{value:"Overview",id:"overview",level:2},{value:"Background",id:"background",level:2},{value:"API data model",id:"api-data-model",level:2},{value:"Modules",id:"modules",level:3},{value:"API action relationships",id:"api-action-relationships",level:3},{value:"The new API UI",id:"the-new-api-ui",level:2},{value:"Creating an API test",id:"creating-an-api-test",level:3},{value:"The API details (upper part)",id:"the-api-details-upper-part",level:3},{value:"List of API calls",id:"list-of-api-calls",level:4},{value:"Add, copy, paste, delete, disable, re-order",id:"add-copy-paste-delete-disable-re-order",level:4},{value:"HTTP Method (GET, POST, \u2026) + end-point",id:"http-method-get-post---end-point",level:4},{value:"Content-type",id:"content-type",level:4},{value:"The API details (sub-tabs)",id:"the-api-details-sub-tabs",level:3},{value:"Authentication",id:"authentication",level:4},{value:"Headers",id:"headers",level:4},{value:"Query",id:"query",level:4},{value:"Body (POST only)",id:"body-post-only",level:4},{value:"Script",id:"script",level:4},{value:"Adding an additional API call",id:"adding-an-additional-api-call",level:3},{value:"How to use the API UI",id:"how-to-use-the-api-ui",level:3},{value:"Importing and exporting API tests",id:"importing-and-exporting-api-tests",level:2},{value:"A note on imports",id:"a-note-on-imports",level:3},{value:"Exporting API call (Postman example)",id:"exporting-api-call-postman-example",level:3},{value:"Importing the API call to Boozang",id:"importing-the-api-call-to-boozang",level:3},{value:"Exporting an API call",id:"exporting-an-api-call",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const t={code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"note-on-pricing",children:"Note on pricing"}),"\n",(0,s.jsx)(t.p,{children:"We are really excited to announce that Boozang now provides unlimited API testing for FREE so I\u2019m reposting some relevant blog posts."}),"\n",(0,s.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(t.p,{children:"By introducing a new set of API testing features in Boozang, we provide a single browser-based solution for both API and UI tests, allowing for a unified testing process based on Cucumber / BDD, fully integrated to JIRA / XRay."}),"\n",(0,s.jsx)(t.h2,{id:"background",children:"Background"}),"\n",(0,s.jsx)(t.p,{children:"Most people will agree that Postman stands out as the option most people will turn to when it comes to API testing. It\u2019s easy to get started and relatively user-friendly. For more extensive end-to-end tests, we have found some limiting factors where Postman falls short."}),"\n",(0,s.jsx)(t.p,{children:"These include"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Mixing UI tests and API tests"}),"\n",(0,s.jsx)(t.li,{children:"Creating API tests suites where data is carried forward between the API calls"}),"\n",(0,s.jsx)(t.li,{children:"Creating BDD / Cucumber API tests"}),"\n",(0,s.jsx)(t.li,{children:"Integration to external systems, such as JIRA / XRay"}),"\n",(0,s.jsx)(t.li,{children:"Using the UI interactions to facilitate API test creation"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"In Boozang, we support all these use-cases. But we still lacked ease-of-use and debugging capabilities. In our latest feature release, we have tried to improve this significantly."}),"\n",(0,s.jsx)(t.p,{children:"We have also launched features that will allow you to easily migrate between other tools, such as Postman and JMeter. This way, it opens up for collaboration within an organization where different tools are used. Also, it greatly mitigates any lock-in concerns."}),"\n",(0,s.jsx)(t.h2,{id:"api-data-model",children:"API data model"}),"\n",(0,s.jsx)(t.p,{children:"A note on test types\nIn Boozang, two of our test types supports API calls"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Regular tests"}),"\n",(0,s.jsx)(t.li,{children:"API tests"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"The only difference is that Regular tests can consist of both UI actions and API actions, while API tests cannot do UI actions. It\u2019s therefore recommended that you use regular tests for mixed UI and API tests and API tests for pure API tests."}),"\n",(0,s.jsx)(t.p,{children:"For flexibility, both test types support Javascript, Group, and Plug-test case actions."}),"\n",(0,s.jsx)(t.p,{children:"Note: Nothing would stop you from using only regular tests, but for housekeeping purposes, we recommend that you utilize the API test type if you know you will not be adding UI interactions."}),"\n",(0,s.jsx)(t.h3,{id:"modules",children:"Modules"}),"\n",(0,s.jsx)(t.p,{children:"To create an API test, you will need to have a module created. In the below image, you can see that a generic module called \u201cJSON-server\u201d has been created."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Homepage",src:n(5187).A+"",title:"Homepage",width:"770",height:"444"})}),"\n",(0,s.jsx)(t.p,{children:"In projects where you use both UI and API tests, we recommend that you follow a shared module structure, where UI and API tests can be found in the same modules. If you decide to create a new API module structure, use a naming prefix, such as API, to keep them apart easily."}),"\n",(0,s.jsx)(t.h3,{id:"api-action-relationships",children:"API action relationships"}),"\n",(0,s.jsx)(t.p,{children:"When creating an API test, an API action will automatically be added to the test. An API test can have several API actions, which will be executed in a sequence, similar to clicks and validations in a UI test."}),"\n",(0,s.jsx)(t.p,{children:"An API action can also execute several API calls. This means we have an unusually intricate hierarchy, with the following one -> many relationships (denoted -*>)."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"Test suites -*> API tests -*> API actions -*> API calls\n"})}),"\n",(0,s.jsx)(t.p,{children:"This might seem overly complex, but there is a reason for this complexity. Boozang was built to be able to run complex end-to-end API call flows alongside UI actions."}),"\n",(0,s.jsx)(t.p,{children:"As a single UI action can trigger many API requests, this structure allows us to keep a one-to-one mapping between UI actions and API actions. Another bonus is that API load tests, that are set up on a per-action basis in Boozang, can support complex load scenarios, comprised of many API calls."}),"\n",(0,s.jsx)(t.h2,{id:"the-new-api-ui",children:"The new API UI"}),"\n",(0,s.jsx)(t.h3,{id:"creating-an-api-test",children:"Creating an API test"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Homepage",src:n(9912).A+"",title:"Homepage",width:"899",height:"771"})}),"\n",(0,s.jsx)(t.p,{children:"Click \u201cNew API test\u201d within the selected module. Besides the name, make sure you select the API host. If the host isn\u2019t shown, make sure it\u2019s set up under Settings-> Environment."}),"\n",(0,s.jsx)(t.p,{children:"Start by creating an API test from scratch. We will see the following view."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Homepage",src:n(7777).A+"",title:"Homepage",width:"899",height:"771"})}),"\n",(0,s.jsx)(t.p,{children:"The view is divided into an upper part and a lower part with sub-tabs."}),"\n",(0,s.jsx)(t.h3,{id:"the-api-details-upper-part",children:"The API details (upper part)"}),"\n",(0,s.jsx)(t.h4,{id:"list-of-api-calls",children:"List of API calls"}),"\n",(0,s.jsx)(t.p,{children:"For most API actions, a single API call is enough. There are some cases where is better to group API calls together in a single API action. Let\u2019s imagine the product creation flow, where an API endpoint needs to be called to create the product, then the product id that is returned needs to be used to call a different API endpoint to create a default subproduct."}),"\n",(0,s.jsx)(t.p,{children:"As both of these API calls are used to create a single product, consider grouping them as two calls in the same \u201cCreate product\u201d API action."}),"\n",(0,s.jsx)(t.h4,{id:"add-copy-paste-delete-disable-re-order",children:"Add, copy, paste, delete, disable, re-order"}),"\n",(0,s.jsx)(t.p,{children:"All the API calls in the dropdown list can be manipulated with the controls on the right of the dropdown. Notice that you can use the up-down arrows to re-order the API calls."}),"\n",(0,s.jsx)(t.h4,{id:"http-method-get-post---end-point",children:"HTTP Method (GET, POST, \u2026) + end-point"}),"\n",(0,s.jsx)(t.p,{children:"Set the HTTP method and the end-point for the API call here."}),"\n",(0,s.jsx)(t.h4,{id:"content-type",children:"Content-type"}),"\n",(0,s.jsx)(t.p,{children:"Indicates the Content-type in the POST data being sent. Typical content-type headers are \u201ctext/plain\u201d, \u201capplication/xml\u201d, \u201ctext/html\u201d, \u201capplication/json\u201d, \u201cimage/gif\u201d, and \u201cimage/jpeg\u201d."}),"\n",(0,s.jsx)(t.p,{children:"In Boozang, you typically want to use JSON data (Object data) for REST APIs. In this case, make sure the content-type is set to \u201capplication/json\u201d."}),"\n",(0,s.jsx)(t.h3,{id:"the-api-details-sub-tabs",children:"The API details (sub-tabs)"}),"\n",(0,s.jsx)(t.p,{children:"For each API call, you can configure the request details in the sub-tabs"}),"\n",(0,s.jsx)(t.h4,{id:"authentication",children:"Authentication"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Homepage",src:n(6766).A+"",title:"Homepage",width:"767",height:"193"})}),"\n",(0,s.jsx)(t.p,{children:"Handles API authentication. As an alternative to setting the authentication headers manually under Headers tab, you can specify the authentication method here. Either pick from one of the suggested policies, or use an auth token directly from the UI interface."}),"\n",(0,s.jsx)(t.p,{children:"If you choose to use an authorization token from the UI interface, you\u2019ll need to set up the Retrieve token test-case using Boozang AI authorization. This can be setup in Settings -> Environments."}),"\n",(0,s.jsx)(t.h4,{id:"headers",children:"Headers"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Homepage",src:n(5079).A+"",title:"Homepage",width:"757",height:"152"})}),"\n",(0,s.jsx)(t.p,{children:"Add request headers using the JSON or key-value editor."}),"\n",(0,s.jsx)(t.p,{children:"Remember that you can use dynamic data from all data scopes here ($project, $module, $test, $parameter). This is useful to carry over data from a previous API test (or call), or even a UI test."}),"\n",(0,s.jsx)(t.h4,{id:"query",children:"Query"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Homepage",src:n(5020).A+"",title:"Homepage",width:"765",height:"152"})}),"\n",(0,s.jsx)(t.p,{children:"The request URL queries can sometimes be a little messy. Use the query editor to be able to add URL parameters using the JSON or key-value editor."}),"\n",(0,s.jsx)(t.p,{children:"As mentioned previously, you can use dynamic data from all data scopes here ($project, $module, $test, $parameter)."}),"\n",(0,s.jsx)(t.h4,{id:"body-post-only",children:"Body (POST only)"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Homepage",src:n(4117).A+"",title:"Homepage",width:"762",height:"181"})}),"\n",(0,s.jsx)(t.p,{children:"Use the JSON or Key-value editor to set the body content for HTTP POST."}),"\n",(0,s.jsx)(t.p,{children:"As mentioned previously, you can use dynamic data from all data scopes here ($project, $module, $test, $parameter)."}),"\n",(0,s.jsx)(t.h4,{id:"script",children:"Script"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Homepage",src:n(4962).A+"",title:"Homepage",width:"759",height:"245"})}),"\n",(0,s.jsx)(t.p,{children:"Use the script window to validate the response and assert if the API call is successful or not. Note how returning true means success and false means failure."}),"\n",(0,s.jsx)(t.p,{children:"The key data structure here is $result. This contains the whole result payload that is being returned. The following things can be accessed from the $result"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"$result.actionResult: Boozang internal containing the execution status\n$result.headers: The response headers\n$result.idx: Boozang internal id for load tests\n$result.request: The request object\n$result.responseJSON: The response parsed as JSON\n$result.responseText: The response as text\n$result.status: The HTTP response code\n"})}),"\n",(0,s.jsx)(t.p,{children:"If you want to examine these in detail you can add the following script"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'(()=>{\n  console.log("BZ-LOG: ### Result: " + $result.responseJSON.id)\n  if ($result.status >201) {\n    return false;\n  } \n  console.log("BZ-LOG: ### actionResult ", $result.actionResult); \n  console.log("BZ-LOG: ### headers ", $result.headers); \n  console.log("BZ-LOG: ### idx ", $result.idx);\n  console.log("BZ-LOG: ### request ", $result.request);\n  console.log("BZ-LOG: ### responseText ", $result.responseJSON);\n  console.log("BZ-LOG: ### responseText ", $result.responseText);\n  console.log("BZ-LOG: ### status ", $result.status);\n\nreturn true;\n})();\n'})}),"\n",(0,s.jsx)(t.p,{children:"This way they will show up in the Boozang console window (and the Chrome console)."}),"\n",(0,s.jsx)(t.p,{children:"This script is not limited to only validating HTTP response codes, like in the default script. In below example the script validates that the response id is a number. It also saves the response id in a temporary variable ($test.response_id)."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'(()=>{\n  console.log("BZ-LOG: ### Result: " + $result.responseJSON.id)\n  if ($result.status >201) {\n    return false;\n  } \n  \n  console.log("BZ-LOG: ### Result: " + $result.responseJSON.id)\n  $test.response_id=$result.responseJSON.id;\n  return !isNaN($result.responseJSON.id);\n})();\n'})}),"\n",(0,s.jsxs)(t.p,{children:["As mentioned previously, you can use dynamic data from all data scopes here (",(0,s.jsx)(t.code,{children:"$project"}),", ",(0,s.jsx)(t.code,{children:"$module"}),", ",(0,s.jsx)(t.code,{children:"$test"}),", ",(0,s.jsx)(t.code,{children:"$parameter"}),")."]}),"\n",(0,s.jsx)(t.p,{children:"Try"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Homepage",src:n(3083).A+"",title:"Homepage",width:"759",height:"183"})}),"\n",(0,s.jsx)(t.p,{children:"Before running the test, make sure its setup correctly using the this tab. You can try using different data-sets. A green check-mark will show if the request was successful or not. Note how a checkmark appears on the script tab as well. This shows if the script returned true or false, which will be the exit status of the API call."}),"\n",(0,s.jsx)(t.h3,{id:"adding-an-additional-api-call",children:"Adding an additional API call"}),"\n",(0,s.jsx)(t.p,{children:"You can add an additional API call using the plus (+) icon. As you can see, you can also, copy, paste, delete, and disable API calls in this menu."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Homepage",src:n(2578).A+"",title:"Homepage",width:"809",height:"241"})}),"\n",(0,s.jsx)(t.h3,{id:"how-to-use-the-api-ui",children:"How to use the API UI"}),"\n",(0,s.jsx)(t.p,{children:"The best way of getting to know the API UI is to test it out on a familiar API. The layout should be familiar enough to Postman users, and to new users, it is recommended they try it out on an API placeholder service such as JSON-server."}),"\n",(0,s.jsx)(t.h2,{id:"importing-and-exporting-api-tests",children:"Importing and exporting API tests"}),"\n",(0,s.jsx)(t.h3,{id:"a-note-on-imports",children:"A note on imports"}),"\n",(0,s.jsx)(t.p,{children:"Boozang now supports importing API calls. As an API call needs an API action, it\u2019s ideal that the user starts by creating an empty API test as a starting point."}),"\n",(0,s.jsx)(t.p,{children:"Start by adding the API call using the plus button next to the API call drop-down."}),"\n",(0,s.jsx)(t.h3,{id:"exporting-api-call-postman-example",children:"Exporting API call (Postman example)"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Homepage",src:n(7894).A+"",title:"Homepage",width:"441",height:"383"})}),"\n",(0,s.jsx)(t.p,{children:"To export the API call from Postman, use the Source code view in the below image."}),"\n",(0,s.jsx)(t.p,{children:"Note: Boozang currently supports HTTP and cURL format."}),"\n",(0,s.jsx)(t.h3,{id:"importing-the-api-call-to-boozang",children:"Importing the API call to Boozang"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Homepage",src:n(9264).A+"",title:"Homepage",width:"578",height:"661"})}),"\n",(0,s.jsx)(t.p,{children:"Simple copy-paste the text content from the Postman window to the Boozang window according to the below image."}),"\n",(0,s.jsx)(t.p,{children:"Remember to verify that the correct format is selected."}),"\n",(0,s.jsx)(t.p,{children:"After the import, use the \u201cTry\u201d tab to verify that the API call can be made and that the import was successful. If not, verify that the information in the other tabs is correct."}),"\n",(0,s.jsx)(t.h3,{id:"exporting-an-api-call",children:"Exporting an API call"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Homepage",src:n(8287).A+"",title:"Homepage",width:"898",height:"687"})}),"\n",(0,s.jsx)(t.p,{children:"As most tools don\u2019t share the API test hierarchy, we support export of individual API calls rather than whole API tests. Just like in Postman, API calls can be dependent on dynamic data from Boozang variables, and as these variables might not be meaningful outside Boozang, the export needs to be done using real data."}),"\n",(0,s.jsx)(t.p,{children:"As you can see from the above image, the export therefore happens from within the Try-tab, where the user can pick the values used."}),"\n",(0,s.jsx)(t.p,{children:"After clicking the \u201cExport\u201d button, the user chooses the export format"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"HTTP: Good for imports into other tools, easy to read"}),"\n",(0,s.jsx)(t.li,{children:"CURL: Good for imports into other tools, troubleshooting"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Using the cURL export function is very useful when troubleshooting, as it can be run from command-line. That\u2019s why this should be the format of choice when opening a ticket to a team that doesn\u2019t have access to the Boozang tool."}),"\n",(0,s.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(t.p,{children:"There are great tools out there for API testing, like Postman, but it\u2019s limited when you have advanced data dependencies between API calls. If you have dependencies between API and UI tests, you\u2019ll probably need to build your own framework."}),"\n",(0,s.jsx)(t.p,{children:"Boozang is focused on solving these kind of problems, using a single browser-based solution. As we support BDD / Cucumber and JIRA / XRay integration we enable a unified testing process where Gherkin business language can be used for all tests, regardless if it\u2019s manual, UI tests, or API tests."}),"\n",(0,s.jsx)(t.p,{children:"By having a unified testing process instead of a siloed approach, tools such as JIRA and XRay can truly be utilized, allowing for improved output from the whole organization, not just the Quality Assurance team."})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},5187:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/apix1-04bcf1ba0658e949a0fadbc8b89c5e33.png"},3083:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/apix10-e2456d618a0447069866c1165a95e418.png"},2578:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/apix11-e6bff19afba0e92053a398fbdbe867f2.png"},7894:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/apix12-a4fd3342b92e67fb2abb32d236f24551.png"},9264:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/apix13-a3e57adc03a31b981e2ed49f10d5d821.png"},8287:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/apix14-1c4fef823ac05e1b0d066b1af4294272.png"},9912:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/apix2-e31e20583a29364c06d9a4c6d072b2f7.png"},7777:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/apix3-d1700fcd74ec29f73eb03b7cf838f926.png"},6766:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/apix4-f8cbf93d6192f570aa72897089b17a3f.png"},5079:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/apix5-f22e8f9a1eed87eb3dca7011fb9ae4d8.png"},5020:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/apix6-81b8270015d93246f8cf6fddf09db77a.png"},4117:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/apix7-a493932d8d7eb3927b2d943204237bec.png"},4962:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/apix8-630f12a3a60fb33d99e584f492c28d49.png"},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var s=n(6540);const i={},a=s.createContext(i);function o(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);