"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3861],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var s=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},o=Object.keys(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=s.createContext({}),c=function(e){var t=s.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=c(e.components);return s.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},f=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=c(n),f=r,m=u["".concat(p,".").concat(f)]||u[f]||d[f]||o;return n?s.createElement(m,a(a({ref:t},l),{},{components:n})):s.createElement(m,a({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=f;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:r,a[1]=i;for(var c=2;c<o;c++)a[c]=n[c];return s.createElement.apply(null,a)}return s.createElement.apply(null,n)}f.displayName="MDXCreateElement"},742:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var s=n(7462),r=(n(7294),n(3905));const o={id:"testing-types",title:"Testing Types"},a=void 0,i={unversionedId:"core-concepts/testing-types",id:"core-concepts/testing-types",title:"Testing Types",description:"Boozang supports a number of different test types.",source:"@site/docs/core-concepts/testing-types.mdx",sourceDirName:"core-concepts",slug:"/core-concepts/testing-types",permalink:"/docs/core-concepts/testing-types",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/core-concepts/testing-types.mdx",tags:[],version:"current",frontMatter:{id:"testing-types",title:"Testing Types"},sidebar:"docs",previous:{title:"Modules & Features",permalink:"/docs/core-concepts/modules"},next:{title:"Action types",permalink:"/docs/core-concepts/action-types"}},p={},c=[{value:"Tests",id:"tests",level:2},{value:"API tests",id:"api-tests",level:2},{value:"Test suites",id:"test-suites",level:2},{value:"Scenarios",id:"scenarios",level:2}],l={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,s.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Boozang supports a number of different test types. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"- Tests\n- API tests\n- Test Suites\n- Scenarios\n")),(0,r.kt)("p",null,"Test are unique as they are a super-set of all the other test types.  "),(0,r.kt)("h2",{id:"tests"},"Tests"),(0,r.kt)("p",null,"Tests is the base of doiong testing in Boozang, and they support the following action types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"- Validation actions (all types)\n- Mouse actions\n- Keyboard events\n- Set component\n- Extract actions\n- Script actions\n- Plug-in test\n- Group\n- Refresh\n- Take screenshot\n- Comment\n- API action\n- Visit links\n- Validate form fields\n")),(0,r.kt)("h2",{id:"api-tests"},"API tests"),(0,r.kt)("p",null,"API tests are build to perform requests and validate responses towards an API. Except for API load tests, tests support all the action types. "),(0,r.kt)("p",null,'We recommend using API test type for "pure" API tests for house-keeping purposes. '),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"- API actions\n- Script actions\n- Script validations \n- Plug-in test\n- Group\n- Refresh\n- Load test action\n")),(0,r.kt)("h2",{id:"test-suites"},"Test suites"),(0,r.kt)("p",null,"Use test suites to run a list of tests. Regular tests support the same action type (plug-in tests), but we recommend that you use test suites for house-keeping purposes. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"- Plug-in test\n")),(0,r.kt)("h2",{id:"scenarios"},"Scenarios"),(0,r.kt)("p",null,"Scenarios are used to mapped Gherkin syntax to plug-in test action. The following action-types are supported:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"- Plug-in test\n")),(0,r.kt)("p",null,"This connects a certain Gherkin phrase to a test, such as "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"As an Admin -> Login as Admin\n")),(0,r.kt)("p",null,'As soon as a link has been established, any scenarios containing the line "As an Admin" will automically be linked to the test "Login as Admin".'))}u.isMDXComponent=!0}}]);