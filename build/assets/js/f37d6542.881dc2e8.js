"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3674],{9330:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var s=t(4848),i=t(8453);const o={id:"settings",title:"Settings"},r=void 0,a={id:"the-tool/settings",title:"Settings",description:"Environments",source:"@site/docs/the-tool/settings.mdx",sourceDirName:"the-tool",slug:"/the-tool/settings",permalink:"/docs/the-tool/settings",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/the-tool/settings.mdx",tags:[],version:"current",frontMatter:{id:"settings",title:"Settings"}},l={},c=[{value:"Environments",id:"environments",level:2},{value:"Content Policy",id:"content-policy",level:2}];function d(e){const n={em:"em",h2:"h2",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"environments",children:"Environments"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"environment",src:t(4289).A+"",width:"928",height:"716"})}),"\n",(0,s.jsx)(n.p,{children:"In the Environment tab, you can find several useful functionalities. You can manage environments and different application interfaces, configure settings on an application interface level and also setup AI login/logout for different roles/users."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Enviroment and application interfaces"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["There has been some confusion around environment and application interfaces, so it's important to make sure you get this right as it will save you potential work in the future. Environments signify an environment, such as ",(0,s.jsx)(n.em,{children:"development"}),", ",(0,s.jsx)(n.em,{children:"staging"}),", ",(0,s.jsx)(n.em,{children:"QA"})," or ",(0,s.jsx)(n.em,{children:"production"}),". By specifying different entry URLs for these environments, test become completely re-usable. This means there is no need to maintain different tests or projects across different environments. Simply change the environment setting and re-run the same test."]}),"\n",(0,s.jsxs)(n.p,{children:["The application interface setting handles when there are different applications within the same environment. For instance, in the E-commerce case, there might be a ",(0,s.jsx)(n.em,{children:"storefront"})," and a ",(0,s.jsx)(n.em,{children:"managememt"})," interface. When creating a test, pick the interface that the test is for. If this changes during the project, it has to be changed in one place, not across several tests."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Advanced / Configure"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This setting allows you to configure certain things on an Environment / App interface level. These settings will typically be things that could vary across environments, such as delays and other performance-related settings."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"AI login / logout (Authorization Setting)"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["This allows the user to define several user roles and automatically generate the login and logout scenarios for these roles. The user roles can be set as pre-requisites for tests, automatically switching between users. For more information, read more under the ",(0,s.jsx)(n.strong,{children:"Model-based testing"})," chapter."]}),"\n",(0,s.jsx)(n.h2,{id:"content-policy",children:"Content Policy"}),"\n",(0,s.jsx)(n.p,{children:"The content policy contains several advanced features. Nevertheless, spending some time here to fine-tune the project can increase the stability of tests and also speed up test creation significantly."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Ignore validation on pop window"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"When checked, any pop windows (alerts, prompts, confirm pop-up dialogs) will not be verified by Boozang. When un-checked, Boozang will add an assertion during recording based on pop windows that appeared. On playing back the tests, Boozang will make sure that the same pop windows appear as during the recording and fail the test otherwise."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Ignore Classes"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Normally when clicking or asserting an element, classes are ignored. There is also an explicit setting for you to highlight your dynamic classes to make sure it\xb4s ignored."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Text Attribute"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Clickable Elements"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"List of elements that are clickable in your application. Add elements here to be able to easily capture clicks on these elements during recording."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Attribute Content for Autofill"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Use this to set regular expressions to be used for content generation."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},4289:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/environment-3278f6ce7b27ad66992c5599cf4db4ca.png"},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(6540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);