"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3158],{608:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=t(4848),s=t(8453);const r={id:"xray",title:"Xray Integration"},a=void 0,o={id:"integrations/xray",title:"Xray Integration",description:"Xray for Jira",source:"@site/docs/integrations/xray.mdx",sourceDirName:"integrations",slug:"/integrations/xray",permalink:"/docs/integrations/xray",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/integrations/xray.mdx",tags:[],version:"current",frontMatter:{id:"xray",title:"Xray Integration"},sidebar:"docs",previous:{title:"Feature Integration",permalink:"/docs/integrations/feature"},next:{title:"Other platforms",permalink:"/docs/integrations/other"}},l={},c=[{value:"Xray for Jira",id:"xray-for-jira",level:2},{value:"Concept",id:"concept",level:2},{value:"Integration Steps",id:"integration-steps",level:2},{value:"Xray: Add API key",id:"xray-add-api-key",level:2},{value:"XRay: Defining scenarios",id:"xray-defining-scenarios",level:2},{value:"XRay: Linking scenarios to features",id:"xray-linking-scenarios-to-features",level:2},{value:"XRay / Jira: Defining a filter",id:"xray--jira-defining-a-filter",level:2},{value:"Boozang: Adding the API token",id:"boozang-adding-the-api-token",level:2},{value:"Boozang: Synchronizing features",id:"boozang-synchronizing-features",level:2},{value:"Boozang: Implement the test steps",id:"boozang-implement-the-test-steps",level:2},{value:"Boozang: Link the test steps",id:"boozang-link-the-test-steps",level:2},{value:"Boozang: Test run the scenario",id:"boozang-test-run-the-scenario",level:2},{value:"CI: Define a Boozang CI job",id:"ci-define-a-boozang-ci-job",level:2},{value:"CI: Upload scenarios on XRay (Jenkins)",id:"ci-upload-scenarios-on-xray-jenkins",level:2},{value:"Sample integration code for upload of scenarios",id:"sample-integration-code-for-upload-of-scenarios",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"xray-for-jira",children:"Xray for Jira"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"xray",src:t(2964).A+"",width:"1032",height:"300"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://marketplace.atlassian.com/plugins/com.xpandit.plugins.xray/server/overview",children:"Xray for Jira"})," is a complete, full-featured Atlassian verified test management add-on for Jira. Xray supports both manual and automated tests and a complete testing life cycle: test planning, test designing, and test execution to help developers improve the quality of their systems."]}),"\n",(0,i.jsxs)(n.p,{children:["Xray for Jira is an add-on developed by ",(0,i.jsx)(n.a,{href:"http://www.xpand-addons.com/",children:"Xpand Add-ons"}),", an Atlassian Solution Partner."]}),"\n",(0,i.jsx)(n.h2,{id:"concept",children:"Concept"}),"\n",(0,i.jsx)(n.p,{children:"Boozang integrates to Xray regardless if you are running Xray on Jira Cloud or Jira on-premise. Xray acts as the source of truth for Cucumber features and test results, while Boozang is responsible for test step implementation and test execution. This way, XRay becomes the main business interface, while Boozang works as the test engine."}),"\n",(0,i.jsx)(n.p,{children:"Below is a schematic of how this setup looks using the Jenkins CI server. The connection between Boozang and Xray is independent of the CI server, and the CI server connects directly to Xray to report back the results."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"xray-concept",src:t(703).A+"",width:"978",height:"820"})}),"\n",(0,i.jsx)(n.h2,{id:"integration-steps",children:"Integration Steps"}),"\n",(0,i.jsx)(n.p,{children:"These are the steps needed on the Xray side to enable connection with Boozang"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Get API key (Cloud) or access credentials (on-premise) to allow for XRay integration"}),"\n",(0,i.jsx)(n.li,{children:"Define scenarios in XRay"}),"\n",(0,i.jsx)(n.li,{children:"Link scenarios to features in XRay"}),"\n",(0,i.jsx)(n.li,{children:"Define a Jira filter that matches the desired scenarios"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"These are the steps needed on the Boozang side to connect with Xray"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Add the XRay API key to Boozang integrations"}),"\n",(0,i.jsx)(n.li,{children:"Synchronize features"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"These are the steps needed on the CI server side to report results back to Xray"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Define a Boozang CI job"}),"\n",(0,i.jsx)(n.li,{children:"Add the CI step to upload features on XRay"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"xray-add-api-key",children:"Xray: Add API key"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.em,{children:["Always consult the official XRay documentation for the latest updates and features: ",(0,i.jsx)(n.a,{href:"https://docs.getxray.app/display/XRAYCLOUD/Global+Settings%3A+API+Keys",children:"https://docs.getxray.app/display/XRAYCLOUD/Global+Settings%3A+API+Keys"})]})}),"\n",(0,i.jsxs)(n.p,{children:["The first thing you want to do is to add an API key to access Xray Restful API. To do this, you'll need to access XRay ",(0,i.jsx)(n.strong,{children:"Admin view"}),'. You will be able to select "API keys" from the sidebar and click "Create API Key" from the interface.']}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"xray-add-api-key",src:t(7755).A+"",width:"1063",height:"833"})}),"\n",(0,i.jsx)(n.h2,{id:"xray-defining-scenarios",children:"XRay: Defining scenarios"}),"\n",(0,i.jsx)(n.p,{children:"XRay and Boozang both support regular Scenarios and Scenario Outlines, so there is a one-to-one mapping between these entities. As a starting point, you will need at least one Cucumber scenario defined in Xray."}),"\n",(0,i.jsx)(n.p,{children:"If you don't have a sample scenario handy, you can can find an example scenario sample in our GitHub repository:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://raw.githubusercontent.com/ljunggren/bz-utils/main/test/cucumber-sample-scenario.txt",children:"https://raw.githubusercontent.com/ljunggren/bz-utils/main/test/cucumber-sample-scenario.txt"})}),"\n",(0,i.jsx)(n.p,{children:"Below is an example of a data-driven scenario outline defined on the XRay side."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"xray-define-scenarios",src:t(7320).A+"",width:"1194",height:"888"})}),"\n",(0,i.jsx)(n.h2,{id:"xray-linking-scenarios-to-features",children:"XRay: Linking scenarios to features"}),"\n",(0,i.jsx)(n.p,{children:"The link between Boozang and XRay is done on a feature level, any scenarios to be linked with Boozang will have to be part of a feature. In XRay, this is done by linking issues together. Start by creating a feature in XRay"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Create - New Feature"}),"\n",(0,i.jsx)(n.li,{children:"Link issues -> Is tested by... -> Select scenario to link"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"xray-link-issues",src:t(4318).A+"",width:"1194",height:"888"})}),"\n",(0,i.jsx)(n.h2,{id:"xray--jira-defining-a-filter",children:"XRay / Jira: Defining a filter"}),"\n",(0,i.jsx)(n.p,{children:"Lastly, to be able to fetch scenarios over the API you will need to define a filter in Jira."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Go to Filters -> Advanced Issue Search"}),"\n",(0,i.jsx)(n.li,{children:"Use the JQL to retrieve only automated scenarios"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"xray-bz-filter-define",src:t(7882).A+"",width:"1133",height:"219"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Save filter"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"xray-bz-filter-save",src:t(6236).A+"",width:"821",height:"377"})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:"Extract the filter ID from the URL"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"xray-bz-filter-id",src:t(1444).A+"",width:"821",height:"361"})}),"\n",(0,i.jsx)(n.p,{children:"The JQL for the filter we ended up using in this example was"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-JQL",children:"project = Pivo AND issueType = test AND testType = Cucumber\n"})}),"\n",(0,i.jsx)(n.h2,{id:"boozang-adding-the-api-token",children:"Boozang: Adding the API token"}),"\n",(0,i.jsx)(n.p,{children:"Launch Boozang IDE from the hosting centre of your choice"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Americas: ",(0,i.jsx)(n.a,{href:"https://ai.boozang.com",children:"https://ai.boozang.com"})]}),"\n",(0,i.jsxs)(n.li,{children:["Europe / Asia: ",(0,i.jsx)(n.a,{href:"https://eu.boozang.com",children:"https://eu.boozang.com"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"and create a project if needed. As soon as the project is launched, the Boozang IDE will be launched in the web browser. To setup the integration to Jira / XRay you want to first add the client credentials to be able to retrieve the features from Xray."}),"\n",(0,i.jsxs)(n.p,{children:["The integration view in Boozang can be found at ",(0,i.jsx)(n.em,{children:"Settings - > Integrations -> Feature file server"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"For Jira Cloud installation"})}),"\n",(0,i.jsx)(n.p,{children:"In the integration dialog, set the following"}),"\n",(0,i.jsx)("img",{src:"../images/xray-bz-integration.png",alt:"xray-bz-integration"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Type: Set Jira / Xray"}),"\n",(0,i.jsxs)(n.li,{children:["File List URL: ",(0,i.jsx)(n.a,{href:"https://xray.cloud.xpand-it.com/api/v2/export/cucumber?filter=10004&fz=true",children:"https://xray.cloud.xpand-it.com/api/v2/export/cucumber?filter=10004&fz=true"})]}),"\n",(0,i.jsx)(n.li,{children:"Make sure to set the filter ID to match the filter you setup previously"}),"\n",(0,i.jsx)(n.li,{children:"Token: For the Cloud install, this will be generated autyomatically from your credential info"}),"\n",(0,i.jsx)(n.li,{children:"Client ID: Set your client id from the Xray API page"}),"\n",(0,i.jsx)(n.li,{children:"Client Secret:  Set your client secret from the Xray API page"}),"\n",(0,i.jsx)(n.li,{children:"Match file: Leave as *.feature or the file ending you are using"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"For Jira on-premise installation"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"xray-bz-integration-on-premise",src:t(4512).A+"",width:"779",height:"555"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Type: Set Jira / Xray"}),"\n",(0,i.jsx)(n.li,{children:"File List URL: Set it to your on-premise API connection URL."}),"\n",(0,i.jsx)(n.li,{children:"Make sure to set the filter ID to match the filter you setup previously"}),"\n",(0,i.jsx)(n.li,{children:"Token: For the on-premise install, you can generate a long-lived token and enter it directly."}),"\n",(0,i.jsx)(n.li,{children:"Client ID: For a hard-coded long-lived token, you can leave this blank. If you rather refresh the token, based on client from the XRay API page."}),"\n",(0,i.jsx)(n.li,{children:"Client Secret:   For a hard-coded long-lived token, you can leave this blank. If you rather refresh the token, based on client from the XRay API page."}),"\n",(0,i.jsx)(n.li,{children:"Match file: Leave as *.feature or the file ending you are using for feature files"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:'After you have entered all access information, check the connection using "Check". On successful connection, the features synchronized should be shown in the UI. Click "Done" to save the configuration.'}),"\n",(0,i.jsx)(n.h2,{id:"boozang-synchronizing-features",children:"Boozang: Synchronizing features"}),"\n",(0,i.jsx)(n.p,{children:"Boozang now needs to load the features you need from Xray. You can do that the following way"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Open the project in question in Boozang IDE"}),"\n",(0,i.jsx)(n.li,{children:"Go to the root of the project"}),"\n",(0,i.jsx)(n.li,{children:"Click the kebab menu"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"xray-bz-import-features",src:t(117).A+"",width:"979",height:"706"})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:'Click "Import features"'}),"\n",(0,i.jsx)(n.li,{children:'Select "Sync from server"'}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"xray-bz-import-features-2",src:t(4716).A+"",width:"979",height:"706"})}),"\n",(0,i.jsxs)(n.ol,{start:"6",children:["\n",(0,i.jsx)(n.li,{children:"Select features to synchronize"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"xray-bz-import-features-3",src:t(2229).A+"",width:"979",height:"706"})}),"\n",(0,i.jsxs)(n.ol,{start:"7",children:["\n",(0,i.jsx)(n.li,{children:'Click "Start". The features will now be synchronized with Boozang.'}),"\n",(0,i.jsx)(n.li,{children:'Navigate to a scenario, such as "Set default payment method"'}),"\n",(0,i.jsx)(n.li,{children:'You should see all test steps in "Red", as they are unlinked'}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Note: If you already have linked test steps, any new test steps with the same exact syntax ((Give I am logged in), will be automatically linked, and will be shown as black."})}),"\n",(0,i.jsx)(n.h2,{id:"boozang-implement-the-test-steps",children:"Boozang: Implement the test steps"}),"\n",(0,i.jsx)(n.p,{children:'Now it\'s time to create the test steps implementation. The test steps are implemented in the code domain of Boozang, which can be found under "Modules" in the root.'}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Go to the root of the project"}),"\n",(0,i.jsx)(n.li,{children:'Go to the "Modules" tab ( as opposed to "Features" tab, which is the business domain, where Cucumber Features and Scenarios live ).'}),"\n",(0,i.jsx)(n.li,{children:'Create a new module, for example "Payment".'}),"\n",(0,i.jsx)(n.li,{children:'Create a new test, for example "Place an order"'}),"\n",(0,i.jsx)(n.li,{children:"Record the steps for this particular test step"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Note: You can also leave this test empty. It will execute successfully by default, and you can worry about the implementation later."})}),"\n",(0,i.jsx)(n.h2,{id:"boozang-link-the-test-steps",children:"Boozang: Link the test steps"}),"\n",(0,i.jsx)(n.p,{children:'It\'s now time to connect the "business domain" to the "code domain". This is done using a "plug-test case" action, which is the only action supported in a sceanrio.'}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Go to your Cucumber feature"}),"\n",(0,i.jsx)(n.li,{children:"Click into the scenario you want to link"}),"\n",(0,i.jsx)(n.li,{children:"Use the drop-down to link the scenario"}),"\n",(0,i.jsx)(n.li,{children:"After the test has been linked, the test step should go from red to black."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:'Note: If it\'s a data-driven test a Cucumber scenario outline) data will be passed between the "business domain" and the "code domain" using test parameters.'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"not-implemented",src:t(4138).A+"",width:"991",height:"592"})}),"\n",(0,i.jsx)(n.h2,{id:"boozang-test-run-the-scenario",children:"Boozang: Test run the scenario"}),"\n",(0,i.jsx)(n.p,{children:"Now it's time to test run the scenario. Boozang supports a number of different play modes. The regular play should be good at this point."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Navigate to the scenario"}),"\n",(0,i.jsx)(n.li,{children:'Click "Play" to execute the scenario in the browser'}),"\n",(0,i.jsx)(n.li,{children:"Follow the test execution in the execution window"}),"\n",(0,i.jsx)(n.li,{children:"Make sure the scenario executes succesfully end-to-end (or have it fail, if that's what you expect)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"ci-define-a-boozang-ci-job",children:"CI: Define a Boozang CI job"}),"\n",(0,i.jsx)(n.p,{children:"As soon as you have implemented some or all tests steps in Boozang, it time to run them on a CI server."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"xray-select-feature",src:t(3666).A+"",width:"830",height:"689"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:'Go to the Root -> Modules ("code domain")'}),"\n",(0,i.jsx)(n.li,{children:'Create a new module called "Suites"'}),"\n",(0,i.jsx)(n.li,{children:'Create a new test suite ("My payment tests")'}),"\n",(0,i.jsx)(n.li,{children:"Define a test suite containing the features/scenarios you need"}),"\n",(0,i.jsx)(n.li,{children:"Go to the Boozang CI view"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"xray-ci-integration",src:t(8742).A+"",width:"865",height:"738"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:'Select the CI integration server of your choice, or simply click "Generate CI URL"'}),"\n",(0,i.jsx)(n.li,{children:"Generate a CI sample script by selecting the test you need in the CI wizard"}),"\n",(0,i.jsx)(n.li,{children:"Enter Boozang password"}),"\n",(0,i.jsx)(n.li,{children:"Copy the CI integration script into the CI server of your choice"}),"\n",(0,i.jsx)(n.li,{children:"Start a CI test execution and verify the result"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Tip: Use the Cucumber report plugin or similar to make sure you have well-formed Cucumber report files generated."})}),"\n",(0,i.jsx)(n.h2,{id:"ci-upload-scenarios-on-xray-jenkins",children:"CI: Upload scenarios on XRay (Jenkins)"}),"\n",(0,i.jsx)(n.p,{children:"Follow the XRay documentation to upload the Cucumber report files."}),"\n",(0,i.jsx)(n.p,{children:"Jenkins integration for Jira XRay on-premise:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://docs.getxray.app/display/XRAY/Integration+with+Jenkins",children:"https://docs.getxray.app/display/XRAY/Integration+with+Jenkins"})}),"\n",(0,i.jsx)(n.p,{children:"Jenkins integration for Jira / XRay in Cloud"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://docs.getxray.app/display/XRAYCLOUD/Integration+with+Jenkins",children:"https://docs.getxray.app/display/XRAYCLOUD/Integration+with+Jenkins"})}),"\n",(0,i.jsx)(n.h2,{id:"sample-integration-code-for-upload-of-scenarios",children:"Sample integration code for upload of scenarios"}),"\n",(0,i.jsx)(n.p,{children:"To quickly test the upload of scenarios to Xray we build a sample script. This scripts downloads a sample Cucumber report from our GitHub repository and posts it to Xray. The script can be found here"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://raw.githubusercontent.com/ljunggren/bz-utils/main/scripts/test-xray-scenario-upload.sh",children:"https://raw.githubusercontent.com/ljunggren/bz-utils/main/scripts/test-xray-scenario-upload.sh"})}),"\n",(0,i.jsx)(n.p,{children:"It's a simple script that fetches a report file, generates a token from your credentials, and tries to upload the report to Xray."}),"\n",(0,i.jsx)(n.p,{children:"Option 1 -  run the script contents"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'#/bin/bash\n\n# This scripts test integration with Xray and assumes you have defined the following scenario in Jira\n# https://raw.githubusercontent.com/ljunggren/bz-utils/main/test/cucumber-sample-scenario.txt\n\n# Make sure you export your client id and client secret as environment variables\n# export CLIENT_ID=my-secret-id\n# export CLIENT_SECRET=my-secret-secret\n\n# Get report sample file from GitHub\ncurl https://raw.githubusercontent.com/ljunggren/bz-utils/main/test/cucumber-sample-report.json --output results.json\n\necho Checking: ${CLIENT_ID} ${CLIENT_SECRET}\necho Checking: curl -H "Content-Type: application/json" -X POST --data \'{ "client_id": "\'${CLIENT_ID}\'","client_secret": "\'${CLIENT_SECRET}\'"}\' \n\nTOKEN=$(curl -H "Content-Type: application/json" -X POST --data \'{ "client_id": "\'${CLIENT_ID}\'","client_secret": "\'${CLIENT_SECRET}\'"}\'  https://xray.cloud.xpand-it.com/api/v1/authenticate | sed \'s/\\"//g\')\n\necho $TOKEN\n\ncurl -H "Content-Type: application/json" -X POST -H "Authorization: Bearer ${TOKEN}" --data @results.json https://xray.cloud.xpand-it.com/api/v2/import/execution/cucumber\n'})}),"\n",(0,i.jsx)(n.p,{children:"Option 2 - download the script and run it"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# This scripts test integration with Xray and assumes you have defined the fo9llowing sceanrio in Jira\n# https://raw.githubusercontent.com/ljunggren/bz-utils/main/test/cucumber-sample-scenario.txt\n\n# Make sure you export your client id and client secret as environment variables\n# export CLIENT_ID=my-secret-id\n# export CLIENT_SECRET=my-secret-secret\n\n# Get report sample file from GitHub\ncurl https://raw.githubusercontent.com/ljunggren/bz-utils/main/scripts/test-xray-scenario-upload.sh --output test-xray-scenario-upload.sh\n\nchmod +x test-xray-scenario-upload.sh\n\n./test-xray-scenario-upload.sh\n\n"})}),"\n",(0,i.jsx)(n.p,{children:'To use the script, you first have to set your Xray API credentials as environment variables in the shell you are using (for instance - the Jenkins "Execute Shell" step).'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"export CLIENT_ID=my-secret-id\nexport CLIENT_SECRET=my-secret-secret\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you want to try it with different execution status (Pass, Fail, Not Implemented)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Get report sample file from GitHub (success)\ncurl https://raw.githubusercontent.com/ljunggren/bz-utils/main/test/cucumber-sample-report-success.json --output results.json\n\n# Get report sample file from GitHub (failure)\ncurl https://raw.githubusercontent.com/ljunggren/bz-utils/main/test/cucumber-sample-report-fail.json --output results.json\n\n# Get report sample file from GitHub (not implemented)\ncurl https://raw.githubusercontent.com/ljunggren/bz-utils/main/test/cucumber-sample-report-not-implemented.json --output results.json\n"})}),"\n",(0,i.jsx)(n.p,{children:"See below sample from XRay"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"xray-report",src:t(6661).A+"",width:"934",height:"603"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},4138:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/not-implemented-bff34e09314f157ae623959344306133.png"},7755:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/xray-add-api-key-91346a17e444ad0085a70ac9977c746e.png"},7882:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/xray-bz-filter-define-e6a65939d0ed4cf46aebcecdfab466df.png"},1444:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/xray-bz-filter-id-3f5500006a61dbb7d530a38d3c52b263.png"},6236:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/xray-bz-filter-save-ee90d8632c4b186173d3b8d0579d20d2.png"},4716:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/xray-bz-import-features-2-f11883d2a828e505134a3a89aa4bedde.png"},2229:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/xray-bz-import-features-3-fe15df7164df3092e2ae815f714a6280.png"},117:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/xray-bz-import-features-4f11a67b6178037f07efc572b9e046e9.png"},4512:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/xray-bz-integration-on-premise-aff63d0d959bca4121a729833f10a6d1.png"},8742:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/xray-ci-integration-49f01ca9d1c3ce4532b01429e5d7649e.png"},703:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/xray-concept-9e9db3741c2ba1f96db084a4cc909f5e.png"},7320:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/xray-define-scenarios-84a28a5be8d2d5349e9f08d6301db9b5.png"},4318:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/xray-link-issues-06fdf29f7f4bc90cdbcfefb76774fbc8.png"},6661:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/xray-report-92b9f8ac9936e823a7a77199c57d10a0.png"},3666:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/xray-select-feature-c8784606d4c88d610c9cf8dd84e5fa73.png"},2964:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/xray-8f158aee8573ab7c65a11a5a8c54fe6f.png"},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);