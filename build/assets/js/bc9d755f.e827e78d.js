"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8880],{3568:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var s=t(4848),d=t(8453);const i={},r=void 0,o={id:"core-concepts/element-selectors/smart-selectors",title:"smart-selectors",description:"Element path operation",source:"@site/docs/core-concepts/element-selectors/smart-selectors.mdx",sourceDirName:"core-concepts/element-selectors",slug:"/core-concepts/element-selectors/smart-selectors",permalink:"/docs/core-concepts/element-selectors/smart-selectors",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/core-concepts/element-selectors/smart-selectors.mdx",tags:[],version:"current",frontMatter:{}},l={},c=[{value:"Element path operation",id:"element-path-operation",level:6}];function a(e){const n={code:"code",h6:"h6",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h6,{id:"element-path-operation",children:"Element path operation"}),"\n",(0,s.jsxs)(n.p,{children:["The element path has the following operations. Boozang uses an expanded version of the jQuery selection standard to create a more human-readable code to identify elements. The basic pattern is that the lowercase jQuery standard operations, while uppercase operations are case-insensitive. All recordings will generate Uppercase operations by default. The operations that will be recorded for a test-case is marked by an asterisk (",(0,s.jsx)(n.code,{children:"*"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"endContains (*)"}),":  True if the selected element (case-insensitive) have the exact string alongside other strings"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Ex:div:endContains(lws)\nYes:<div>lws ok</div>\nNo:<div>lwsok</div>\nYes:<div>lws <span>ok</span></div>\nNo: <div><span>lws</span></div>\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"endEquals (*)"}),": True if the selected element (case-insensitive) have the exact string"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Ex:div:endEquals(lws)\nYes:<div>lws</div>\nNo: <div>lws ok</div>\nNo: <div>lwsok</div>\nNo: <div><span>lws</span></div>\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"equals"}),": True if the selected element or any of its children (case-sensitive) have the exact string alongside other strings"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Ex:div:equals(lws)\nYes:<div><span>lws</span></div>\nNo: <div>lws ok</div>\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Contains (*)"}),": True if the selected element or any its children (case-insensitive) have the exact string"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Ex: div:Contains(lws)\nYes:<div><span>LWs ok</span></div>\nNo: <div>lwsok</div>\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"contains"}),": True if the selected element and all its children (case-sensitive) matches"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Ex: div:contains(lws)\nYes:<div><span>lws ok</span></div>\nYes:<div>lwsok</div>\nNo: <div>lwok</div>\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"RowCol (*)"}),": Used to identify table cell (case-insensitive)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Ex: td:RowCol([value|name])\nYes:<tr><td></td><td>NAME</td></tr>\n    <tr><td>VALUE</td><td>1234</td></tr>\n    \nNo: <tr><td></td><td>name</td></tr>\n    <tr><td>value1</td><td>1234</td></tr>\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"rowcol"}),": Used to identify a table cell (case-sensitive)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Ex: td:rowcol([value|name])\n  Yes:<tr><td></td><td>name</td></tr>\n    <tr><td>value</td><td>1234</td></tr>\n    \nNo: <tr><td></td><td>name</td></tr>\n    <tr><td>VALUE</td><td>1234</td></tr>\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"near (*)"}),": Used to identify form input box based on labels (case-insensitive). The rule to match the first element before that shares a common parent element."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Ex: input:near(name)\nYes:<div><label>name: <input/></label></div>\nYes:<div><label>name: </label><input/></div>\nYes:<tr><td>Name</td><td><input/></td></tr>\nNo: <div>name</div><div><label>value</label><input/></div>\nNo: <div><div>name</div><div>value</div><input/></div>\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"Test"})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(6540);const d={},i=s.createContext(d);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);