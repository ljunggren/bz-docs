"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6350],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=i,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7983:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const o={id:"introduction",title:"Stable NLP selectors"},r=void 0,s={unversionedId:"core-concepts/element-selectors/introduction",id:"core-concepts/element-selectors/introduction",title:"Stable NLP selectors",description:"The element selection policy has undergone changes related to our 6.x release (April 2021). I recommend checking out these updates in on our blog//boozang.com/element-selectors/",source:"@site/docs/core-concepts/element-selectors/introduction.mdx",sourceDirName:"core-concepts/element-selectors",slug:"/core-concepts/element-selectors/introduction",permalink:"/docs/core-concepts/element-selectors/introduction",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/core-concepts/element-selectors/introduction.mdx",tags:[],version:"current",frontMatter:{id:"introduction",title:"Stable NLP selectors"},sidebar:"docs",previous:{title:"Utilities",permalink:"/docs/core-concepts/utilities"},next:{title:"Selection wizard",permalink:"/docs/core-concepts/element-selectors/dom-picker"}},l={},c=[{value:"Natural language selectors",id:"natural-language-selectors",level:2},{value:"A note on other machine learning tools*",id:"a-note-on-other-machine-learning-tools",level:3},{value:"Selecting an element",id:"selecting-an-element",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"The element selection policy has undergone changes related to our 6.x release (April 2021). I recommend checking out these updates in on our blog: ",(0,i.kt)("a",{parentName:"em",href:"https://boozang.com/element-selectors/"},"https://boozang.com/element-selectors/"))),(0,i.kt)("p",null,"Being able to identify HTML elements in your application is central to test automation. Boozang has a unique approach to this, so it's worth spending some time learning about it. Normally, the record function takes care of capturing elements very well, but the unique Boozang selection policy enables us to do very powerful data-driven development, where dynamical data can be used as selectors. "),(0,i.kt)("h2",{id:"natural-language-selectors"},"Natural language selectors"),(0,i.kt)("p",null,"Our element selector policy is based on natural language. This means Boozang primarily uses what an end-user sees, rather than hidden element attributes, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),".  "),(0,i.kt)("p",null,"This has the following benefits: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Great support for applications with dynamic classes and ids ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Automated form fills ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Intelligent test repairs ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Closer alignment to requirements")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Auto-generation of tests through model-based testing")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Great support for dynamic classes and ids"))),(0,i.kt)("p",null,"By not relying on attributes like ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," by default, recorded tests are not broken when these are changed in the application. This makes Boozang well-suited for testing on top of applications with dynamic attributes. For special cases where you need to depend on ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," (such as extracting data), the user can opt-in to use these attributes."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Automated form fills")),(0,i.kt)("p",null,"It's also great to handle data. The following form example illustrates this"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'<form>\n First name<br>\n <input type="text" class="forminput"><br>\n Last name<br>\n <input type="text" class="forminput">\n</form>\n')),(0,i.kt)("p",null,"In Boozang, the element locator would be based on the strings ",(0,i.kt)("inlineCode",{parentName:"p"},"first_name")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"last_name"),". This will allow us to automatically match the following ",(0,i.kt)("inlineCode",{parentName:"p"},"JSON")," data"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "first_name": "John",\n  "last_name": "Doe"\n}\n')),(0,i.kt)("p",null,"This might seem like a small win, but this can make a huge difference when testing data-intense applications, and when making form fills based on spreadsheet data. "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Intelligent test repairs: By basing the element locators on what the user sees, tests are sensitive to updates to the element verbatim rather than other invisible attributes. This means tests often fail explicitly for changes in the UI, which allows the user to re-select the element from the tools. For instance, when a button text changes from "Create" to "Add", the next time it cannot find the label "Create", it will scan the UI for "Add" and suggest the update. ')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Closer alignment to requirements: As the selectors are based on what the user sees, the test code will read much like a requirement. This means that tests in Boozang are closely aligned with the business domain, making it easier to create a "living document" of the code. This makes it easier to keep requirements up to date and to have a single source of truth.')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Auto-generation of tests: With the introduction of requirements into Boozang (for instance, with the introduction of Gherkin tests), we can apply machine learning to suggest test code based on the Gherkin syntax. As the Boozang test automation language is a type of natural language, we can apply simple NLP machine learning to suggest test code without the need for test authoring. "))),(0,i.kt)("h3",{id:"a-note-on-other-machine-learning-tools"},"A note on other machine learning tools*"),(0,i.kt)("p",null,"It's also possible to use machine-learning on the element selectors, like"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"weigh1 * .someclass + weight2 * #someid + weight3 * \u201cSome text\u201d")),(0,i.kt)("p",null,"This can give short term benefits in terms of stability, but can also introduce noise and false positives. At Boozang we believe that what has been written in a requirement (and what is seen in a UI) is the truth, not what a developer decided to put in a class or id attribute. This is why we apply a stricter element policy and action representation. By doing this, we can create a model of the whole application, resulting in higher impact on productivity and better test coverage. "),(0,i.kt)("h2",{id:"selecting-an-element"},"Selecting an element"),(0,i.kt)("p",null,"Boozang uses custom element selectors based on what a user will see rather than classes, ids or other attributes. This means that to use class or id, this usually needs to be explicitly defined. By avoiding using classes and ids as primary identifiers, Boozang tests become very stable to code changes and can automate applications with dynamic ids and classes freely."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The element bar: For most actions, the user can select an element (Validations, Events, Javascript and Extract Data). When recording or picking an element Boozang tries to guess the best path to the element. Usually, this is sufficient, but sometimes this needs to be edited. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Re-picking an element: The first step if an action isn\xb4t working as expected is to re-pick the element in the application window. To make sure, double-click the action and confirm that the action is working. "),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("em",{parentName:"p"},"Tip: Click on the element dialog and see if the correct element is highlighted in the application window.")," ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Edit element with DOM picker: If this is still not sufficient, you can try to edit the element. If the current element is not found in the application window, the user will be asked to pick the element. If found, the DOM picker window will be launched which allows the user to fine-tune the element path"))))}u.isMDXComponent=!0}}]);