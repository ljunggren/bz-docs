An end-to-end example

in boozang we just launched a larger versioning control update where we support uh proper branching merging like we were before but also uh doing proper commits doing po request or merge request as we call them and I think it'sa much more professional way of working especially if you're doing teamwork so instead of the individual feature videosI thought I'd do a little longer videoexplain on how you can work with this uhin practice this is just an example ofcourse we're going to work with theproject here called unit test so let'suh launch ithere first of all this unit test stuffis very very simple um let's just startby creating uh a module here we're nowworking on the master Branch so I willcreate a a module called navigation hereand then I'm just going to do a verysimp simple navigationtest called click links and of coursethis is not to demonstrate the power ofthe busang tool it is just to show youhow to work with versioning so of coursehere we're just going to record a verysimple test going through a couple oflinks here okay so what I'm doing isI'll take the two two links here stopthe test and maybe remove thisunnecessary click that I did okay verygood now we're working directly onmaster so I will go in here and click onto see my uh updates I'll see the m isred so I see I have updates I haveupdates to the navigation module so justlike git make a commit and I'll sayaddednavigationtest after the commit you will see ithere in the commit list okay but now isthis really professional let's say youhave a master running on the CI serverand many people working on it you couldhave a people doing appeti it couldbreak the test maybe you want to mergethis in a controlled manner so first ofall what I want to do is I want tocreate my own Branch maybe it's myfeature Branch right so this is myfeature Branch or for the current Sprintlet's say so now I have my own branchbut sometimes maybe I switch to masterand I work on it by mistake so let's notdo that let's protect this branch andmake it read only and here you have acouple of options we can see here that Ican control the permissions but I canalso allow users to approve their ownmerge requests which I want to be ableto do here because I'm demoing on onthis and I can't do a double compcomputer demo at this point so now whenthis branch is controlled what I'm goingto do is I'm going to uh as you can seeI'm switched to the master Branch but asyou can see here it's read only I cannotrecord I can only play the test toverify that it's working or not so nowwhat I would like to do is I want toswitch to the feature Branchokay and as you can see now I can recordagainand uh navigate and uh copy paste etcetc this is a write and read Branchright but when you are working so let mejust illustrate how that would looklet's say I just copy this link here andI wantto you can see now I can do anothercommit and Isay copied actionnow if I switch to the to the uhprotected Branch the master Branch rightif I want to I can now uh create a mergerequest and I'll show you how to do thatwhat you're going to do is you're justgoing to merge from feature here andthen what you're going to see is you'regoing to getmerge and then you're going to say it'suh it's been sent to the Target Branchbecause it's protected and you got toapprove it so I'm just going to show youhow you approve this uh merge request soif you go here now if I'm in master asyou can see here I only have those fouractions right but now I'm going toapprove this mergerequest and what you're going to see isthat now if I look at that test that wewere uh doing navigation click links youcan see that we we have those extraactionsthere but now we're going to look at aneven more complex uh case we're going tolook at uh doing a regular merge withouta merge request and then creating amerge request with a conflict okay sonow in reality I might not have just afeature Branch I might have alsomade um a specific kind of brand forinstance for a bug fix and maybe thisshould be merged in my own Branch beforeit should generate a merge requestso this all different teams Worksdifferently with bug fixes and all thesethings but let's um let's see whathappens here I'll just do one examplethat illustrates how you could work sofirst of all I'll create a new branchcalled Bug 123 right so this would beyour bug number maybein um a bug and then in a ticketsystem and then let's switch to firstLet's do an update in the featurebranch whichis maybe I'll record something okay tomake it a little moreinteresting but at the same timeuh and then we of course have to committhe changes sometimes I forget forgetthis because you didn't have to beforein buang and now they have to becommitted so what I'll do is I'll justgo ahead and create acommitaddedclicks now what I'm going to do is I'mgoing to try and merge this uh no I'mactually going to create the conflictlet's create a conflict that's more funso I'll go go to the feature Branch Iswitchhere uh I'm oh I'm in the feature BranchI'll go to the bugbranch and what I'll do is I'll take umthat navigation test that we had and I'mactually just going to create somethingin the beginning of the test hereinstead and that should generate aconflict so let me try toFirst go ahead and uhcommit thosechanges here added initialclicks now we should have a conflict ifI'm trying to merge the bug and thefeature Branch so let's try and do thatso what I'll do is I click on merge andI click on feature and I try to mergeit as you can see we have an unresolvedconflict here okay so what you want todo is now you can actually select andhere you can see uh that it has Autoselected for you but if you want you canremove those clicks there you see thiswould be the feature Branch this is thecurrent Branch I'm in and this is theresult that you want to commit but let'ssay we want to get both of these thingsso we'll scrolldown and as you can see it seemed tohave figured out from the conflictautomatically but of course I can changehere if I need to right there is alsosomething we can do if you see thatthere is an issue you can also uh pasteand create initial actions here and youcan also actually drag and drop for theorder of them so this is a prettypowerful view uh but usually that's notnecessary so it has me to go to the nextconflict there are no more conflicts sonow I can go ahead and Commit This andas you can see I have now managed tomerge this feature Branch uh to bug 123Branch now we're just going to do onemore complexscenario what we're going to do is we'regoing to try andmerge the feature branch into master andthen bug one two three into Master tosee if we can create aconflict so I'm going to start byswitching to the master Branch youalways want to be just like it in thebranch you want to mergeinto now I'm going to go and start bymerging the feature branch that doesn'thave those uh changes rightnow so I'm going to I'm going to mergethis into master I'm going to commit andit's going to create the mergerequest but now instead of acceptingthis which would of course be the normalcase I'm going to merge bug one two 3 increating kind of a a new where emergerequestright now if the user tries to approvethis old merge requestQuest H it's it can actually doit but if I approvethis and then I'm going to this mergerequest you can see that there will beconflicts right cu the Assumption waswhen we created the merch request it wasdone on a different Baseline for thistest so you can now look at theconflict but remember this is this is amerge request so you don't want toresolve this here so what you will do isyou would reject the merge requestsay remmer merge with Source Branch ormaster or whatever you you want to do orMaster Branch or depending on how youwork so in this case when the mergerequest has beendenied you want to make sure that youtake the brch you're working in andremerge those changes from the masterbranch and then try again to see if themerch request can be uhredone so this way in buang we thinkit's a more professional way of workingand allows you to have a stable masteror CI Branch while having several peopleuh on your team working on the sameproject and same tests at the same time

Branching and merging

hello H now I will demonstrate thebranching and Version Control feature ofthe busang tool we've been supporting uhbranches and merges in the busang toolfor many years now but we realized theway we were doing it wasn't optimal wekind of had a homecooked solution sowhat we did was we redid everything fromthe beginning and we mimicked git whereyou have handling branches and mergingjust like it so we also added uh supportfor commits and for uhstash so in this case let me justimplement the general Branch managementnow when you start up your project makesure you have Source control enabledhere and you can see the source controlicon on the left hand side of themenu here I can see my branches and if Iwant to create currently I have a CIbranch and a master branch and if I wantto to create a new Branch let's say afeature Branch let's call this featureone I can copy from either moner or Cior any of the existing branches and Ican go ahead and do thatokay now when I've created this Branch Ican simply switch to it here and as youcan see the branch gets highlighted uhin in the click path here so you can seein your tree uh you get reminded whatbranch you're on let's now go tothe module structure and just create anew module for instance let's call thismodule a and then inside module a let'screate a test testa and if we go back to the root we'llcreate for instance a moduleV now if we go back to the tree we canactually commit these things into thebranch so what we'll do is now we'regoing to go to this icon here which isthe commit history uh and as you can seewe have no commits currently on thisBranch so look at your modificationsyou'll see that we've added a module aand module B and as in get you only seethe topmost module so you don't see thetestinside and now I'm going to go ahead andcreate a commit I use this branch andI'll say added modulea and moduleB so now when I've created this committhey get committed and you will see itin the commit list added module a andmoduleB now just like in kit we can now try tolet's say switch back to the CI branchand let's see if we can merge thosechanges in let's say you've been workingon this feature you're happy with whatyou have we'll go to the merge viewwhich is this icon and then we're goingto say yeah let's merge from featureone I'll hit the play button here and asyou can see you'll have the module a andmodule B to be merged you will create anew commit but here the default commitmessages merge from feature one to C Iand I'm happy with that message you canchange it if you want to now you can goback to your commit list and you can seethese are my previous things I was doingin this Branch but you see the lastcommit messages merge from feature oneto CI and I can also show this in thetree view so I think play around withthis but this should be much morealigned how you would work on adevelopment project in git and also withthe side icon here similar to visualstudio code so I think this is going tobe if you're familiar with Git it'sgoing to be very familiar to you and ifnot there is plenty of resources on gitthat you can also look and it shouldlook very similar in uh this tool here

Stash

now I'm going to demonstrate a slightlymore complex use case it's the so-calledmerge request this is what you want touse when you have maybe many people inyour team working on different featuresand maybe you want to have a a couple ofmaybe some centralized review processmaybe they're just one or a couple ofpeople in the team that were allowed tomerge in it to the main branch or maybeyou just want to make sure that youenable code review so different testdevelopers check and validate the codethat the other members aredoing in order to enable merge requestthe idea that we have is we'veintroduced something called protectedbranches so for instance in this case wemight want to say that the master branchis protected so what we will do is wewill enable the protection here here andthen you canenable uh which can approve the themerge right the merge request so firstof all I'm actually going to unclickthis allow user to approve own mergerequest um and I think this is useful asanillustration then after I've done thisI'm just going to do a change in afeature Branch here it's feature one soif we go intolet's say I am creating another test sohere I'm creating test two and I'm doingsome actions let's say I navigate to themenu and I do something hereokay now in order to be able to mergethis as usual you will have to make acommit so the first thing you want to dois you see that this modified files thisis the get stat stus uh view you can seethat we've added this test number twookay so what we're going to first uh dois we're just going to create a regularcommit here so we're saying added testtwo so if we dothis we don't see any uh problems rightnow it's just been committed into myfeature Branch my feature branch is notprotected okayso what happens is when we switch to themaster branch and we try to merge thefeature Branch this is when you're goingto see so what we're going to do iswe're going to try and merge it and asusual we create a commit and again thedefault commit message is going to bemerge from feature one tomaster so what we get now is an extramessage it says the merge request sentfor review as the target branch isprotected and then it says pleaseapprove it from uh merge request listokay so what we can see now is because Iam now the same person you can see thatI now see that there is a one here thereis something to be done and then alsohere under the merch request we can seethat this is now in my queue so if I goto my master Branch as you can see wedon't see test number B here the mer hasnot yet happened okay we'll go back inhere and now we're going to try toapprove this merge requestokay and as you can see here it says youcannot approve your own commit but youcan enable self approval in the branchprotection for you so if we now go backhere you remember on the master settingthere was a a check box for allow userto approve own merchrequest so again I'm I'm going to enablethis because maybe that's not what Iwant in a production setting but fordemo purposes here it's hard uh to demowith many users now I'm going to go inhere and I'm going to approve and I'mgoing to submit and as you can see wegot a successful merge happening andthat we can see in both views here wecan see the merge happening here fromfeature one to master and now if we goto module a we can see both test a andtest two and as you can see you'll havethe actionhere another thing you can see with theprotected branches is we don't normallyby default allow you to do anyrecordings or modifications in protectedbranches but of course you can play thetest case here to validate that it'sworking and you can of course also runthese of course from the CI server so Ihope uh you can play around with thisand figure out if there are additionaluse cases we need but I think this isthe most important use case to be ablemore controlledcollaboration

Merge requests and protected branches

now I'm going to demonstrate a slightlymore complex use case it's the so-calledmerge request this is what you want touse when you have maybe many people inyour team working on different featuresand maybe you want to have a a couple ofmaybe some centralized review processmaybe they're just one or a couple ofpeople in the team that were allowed tomerge in it to the main branch or maybeyou just want to make sure that youenable code review so different testdevelopers check and validate the codethat the other members aredoing in order to enable merge requestthe idea that we have is we'veintroduced something called protectedbranches so for instance in this case wemight want to say that the master branchis protected so what we will do is wewill enable the protection here here andthen you canenable uh which can approve the themerge right the merge request so firstof all I'm actually going to unclickthis allow user to approve own mergerequest um and I think this is useful asanillustration then after I've done thisI'm just going to do a change in afeature Branch here it's feature one soif we go intolet's say I am creating another test sohere I'm creating test two and I'm doingsome actions let's say I navigate to themenu and I do something hereokay now in order to be able to mergethis as usual you will have to make acommit so the first thing you want to dois you see that this modified files thisis the get stat stus uh view you can seethat we've added this test number twookay so what we're going to first uh dois we're just going to create a regularcommit here so we're saying added testtwo so if we dothis we don't see any uh problems rightnow it's just been committed into myfeature Branch my feature branch is notprotected okayso what happens is when we switch to themaster branch and we try to merge thefeature Branch this is when you're goingto see so what we're going to do iswe're going to try and merge it and asusual we create a commit and again thedefault commit message is going to bemerge from feature one tomaster so what we get now is an extramessage it says the merge request sentfor review as the target branch isprotected and then it says pleaseapprove it from uh merge request listokay so what we can see now is because Iam now the same person you can see thatI now see that there is a one here thereis something to be done and then alsohere under the merch request we can seethat this is now in my queue so if I goto my master Branch as you can see wedon't see test number B here the mer hasnot yet happened okay we'll go back inhere and now we're going to try toapprove this merge requestokay and as you can see here it says youcannot approve your own commit but youcan enable self approval in the branchprotection for you so if we now go backhere you remember on the master settingthere was a a check box for allow userto approve own merchrequest so again I'm I'm going to enablethis because maybe that's not what Iwant in a production setting but fordemo purposes here it's hard uh to demowith many users now I'm going to go inhere and I'm going to approve and I'mgoing to submit and as you can see wegot a successful merge happening andthat we can see in both views here wecan see the merge happening here fromfeature one to master and now if we goto module a we can see both test a andtest two and as you can see you'll havethe actionhere another thing you can see with theprotected branches is we don't normallyby default allow you to do anyrecordings or modifications in protectedbranches but of course you can play thetest case here to validate that it'sworking and you can of course also runthese of course from the CI server so Ihope uh you can play around with thisand figure out if there are additionaluse cases we need but I think this isthe most important use case to be ablemore controlledcollaboration


